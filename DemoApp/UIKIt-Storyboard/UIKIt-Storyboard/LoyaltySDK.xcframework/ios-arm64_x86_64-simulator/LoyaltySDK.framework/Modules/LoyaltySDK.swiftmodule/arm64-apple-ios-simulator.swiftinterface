// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -module-name LoyaltySDK
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import CryptoKit
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public protocol LoyaltyViewDelegate {
  @objc optional func didReceiveEvent(name: Swift.String, payload: [Swift.String : Any])
  @objc optional func loyaltyViewDidFinishLoading()
  @objc optional func loyaltyViewDidDismiss()
}
@objc public protocol LoyaltyViewErrorDelegate {
  @objc optional func loyaltyViewDidFailToLoad(error: any Swift.Error)
  @objc optional func didReceiveError(error: any Swift.Error)
}
public enum Environment : Swift.Sendable {
  case development
  case production
  public static func == (a: LoyaltySDK.Environment, b: LoyaltySDK.Environment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class LoyaltyViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var allowsCloseButton: Swift.Bool
  @_Concurrency.MainActor @preconcurrency weak public var eventDelegate: (any LoyaltySDK.LoyaltyViewDelegate)?
  @_Concurrency.MainActor @preconcurrency weak public var errorDelegate: (any LoyaltySDK.LoyaltyViewErrorDelegate)?
  @_Concurrency.MainActor @preconcurrency public init(configuration: LoyaltySDK.SDKConfiguration, environment: LoyaltySDK.Environment, tokenSession: Swift.String, webViewUrl: Swift.String, section: Swift.String, idSection: Swift.String, typeView: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @objc deinit
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor public class ILoyalty {
  @_Concurrency.MainActor public static let shared: LoyaltySDK.ILoyalty
  @_Concurrency.MainActor public static func configure(appKey: Swift.String, environment: LoyaltySDK.Environment = .production, debug: Swift.Bool = false, completion: @escaping @Sendable (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor public func presentViewController(from parent: UIKit.UIViewController, tokenSAML: Swift.String, section: Swift.String, idSection: Swift.String, typeView: Swift.Int? = 1, delegate: (any LoyaltySDK.LoyaltyViewDelegate)? = nil, errorDelegate: (any LoyaltySDK.LoyaltyViewErrorDelegate)? = nil, allowsCloseButton: Swift.Bool = false) async
  @_Concurrency.MainActor public func showViewController(tokenSAML: Swift.String, section: Swift.String, idSection: Swift.String, typeView: Swift.Int? = 1, delegate: (any LoyaltySDK.LoyaltyViewDelegate)? = nil, errorDelegate: (any LoyaltySDK.LoyaltyViewErrorDelegate)? = nil, allowsCloseButton: Swift.Bool = false) async -> LoyaltySDK.LoyaltyViewController?
  @objc deinit
}
public struct SDKConfiguration : Swift.Sendable {
  public let appKey: Swift.String
  public var tokenSessionSDK: Swift.String?
  public var webViewURL: Swift.String?
  public var environment: LoyaltySDK.Environment
}
extension LoyaltySDK.Environment : Swift.Equatable {}
extension LoyaltySDK.Environment : Swift.Hashable {}
extension LoyaltySDK.ILoyalty : Swift.Sendable {}
