//
//  LoyaltyViewController.swift
//  UIKIt-Storyboard
//
//  Created by Hugo Reza on 08/07/25.
//

import UIKit
import LoyaltySDK

// Controlador de vista para integrar el SDK de Loyalty en un tab de la aplicación.
// Este ViewController embebe la vista del SDK como una vista hijo dentro del tab,
// permitiendo mantener la navegación con tabs sin presentar una vista modal.
class LoyaltyTabViewController: UIViewController, LoyaltyViewDelegate {

    // Instancia del controlador de LoyaltySDK
    private var sdkViewController: LoyaltyViewController?
    
    // Indicador de carga mostrado mientras se carga y configura la vista
    private var loader: UIActivityIndicatorView!
    
    // configuracion el SDK y el loader.
    override func viewDidLoad() {
        super.viewDidLoad()
        embedLoyaltySDK()
        setupLoader()
    }

    // Crear e insertar el controlador del SDK como hijo del controlador actual.
    private func embedLoyaltySDK() {
        // Evita instanciar múltiples veces el SDK
        if sdkViewController != nil { return }
        
        let tokenSAML = "PHNhbWwycDpSZXNwb25zZSBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9wcm9tb2Npb25iYW5vcnRlLm14L3Nzby9xYSIgSUQ9IjNiZmU2MjdhLTM3ZWYtNGQwZS1hMDhiLWNlMDk2MDI3Y2ZhNyIgSXNzdWVJbnN0YW50PSIyMDIzLTA2LTE0VDE3OjEyOjAzLjcyMVoiIFZlcnNpb249IjIuMCIgeG1sbnM6c2FtbDJwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiPiA8c2FtbDI6SXNzdWVyIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6ZW50aXR5IiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+aHR0cDovL2xueHNpYW0xZC5kZXYudW5peC5iYW5vcnRlLmNvbS9zZWd1cmlkYWRfYWRtaW4vc2luZ2xlU2lnbk9uPC9zYW1sMjpJc3N1ZXI+IDxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8+IDwvc2FtbDJwOlN0YXR1cz4gPHNhbWwyOkVuY3J5cHRlZEFzc2VydGlvbiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PHhlbmM6RW5jcnlwdGVkRGF0YSBJZD0iXzc3NzYwMDM5ZjM3ZjQwY2NiYjIwZTM4YzcxM2U0NzczIiBUeXBlPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNFbGVtZW50IiB4bWxuczp4ZW5jPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyMiPiA8eGVuYzpFbmNyeXB0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjYWVzMTI4LWNiYyIvPiA8ZHM6S2V5SW5mbyB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PGRzOlJldHJpZXZhbE1ldGhvZCBUeXBlPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNFbmNyeXB0ZWRLZXkiIFVSST0iI19hMmE1ZWY3MWYyZGE0NWJmOTZiMmRkZTkxMGI5N2NmZiIvPiA8L2RzOktleUluZm8+IDx4ZW5jOkNpcGhlckRhdGE+PHhlbmM6Q2lwaGVyVmFsdWU+U2xONWJ5TWdYZW1FNDZBUG1UMm82RDd2S0JlWU1FY1lVeGpYTVlQL21mMXoxUEdRWVZnT1EwV212OGI3dEt4c3RYcTNKSVpTbmFQdiYjeGQ7QkZtUDg3TmNmRVdVeWNqZ2hxY1FBNTRLcVFJNXZTS2JNOHhXNi96Smkya1ZUaWEvSGRaMXlva3U2dVBiUi82VksyaGUyRjRUNkxCLyYjeGQ7dXlGaUsvSlRCY2wwbUJNbjBNakkrbTdnQlZDUCtpblRhVnRXTC9HcGlGcnNpVFJhWVdrQVRXUFVZdzlRRVM1R013RDU1WWVJZjc0cyYjeGQ7WGFKQk5tRVBJanVMSXJoUlR2eS9FRGhtcjgwWU5IaWgxZUY0MndjOURrS0lXK0Z0MzM1UlJkcjRyNEZmdkVML3JUSEVtMGRCWVhnWiYjeGQ7dlliMTVybGQ3b1FhWXJEMXdNRytmOXdmZnhwRkExN1EyOTB5K21uY1F6WXN6NEk0SThVbHVHdWtNcUt3Sk9seUF0VmJTQzRkMEozVyYjeGQ7UVJkZVl5clM3RGxaN0ZwQ1JkZmlFMTBFcnBaNTVEYTFKSHJ0QUtkck4za2dEU0R6OE4vUHpKamNBcVZreTQrcXRqRmJraytxTnQ0MyYjeGQ7US8vaU1ybU1kUGJuNVpzUDlhWWc0bllaL0VuUW02N0ZyWGU3QUE0Ty8wWHZCaVNZT0M2SzlraUNYOVNVNVNVMDRlVmJWT1U1OGh4RSYjeGQ7STdEclhiRVI0eXNmMHlBcU1LWDkvZmRHY3M4MmJicWwxNFNheGt5MjEzOEI5c0lWWmUwTmExMGRrVjBrbS9oNXJvdUIzbE43QVdrYyYjeGQ7TXh5cW1aZ3JrS1lEZnh4MTMveUhSVTM5NU83eFN2YThUa2dHYkdhQVZ2SUdrc3Q3MzZ3cDJqRUtUMDBzZHZWSVgyTkxhOU1OMUJuOSYjeGQ7NmlvVHNFS1JzcVNGam5IRU1wSTdkK0tSYjh2MkROdUE3RnNJS1h1bU8zbFh4bFl4V0phblFrS3V4TFN1YkJla0VIcGVBdDJ1YTE5cCYjeGQ7Wkh2RXpHNy9VOWFRdTYwcVF0WGdPQzl6dUZyZ2xCa2lrWEhaaFowZDhXaW9iWHhKOThDdlVBMlMwMXNYbllQcitCZXAxdjhuajByViYjeGQ7N0xPRHd6b1ZNeld5cS9nSzE4RFJhRFJuZXl5dWxUbVlIblFqbG9mVWp6YXNieTVvNnNFbDZPRTFPRjVuMFVLTXJhNDdEMXA0OHZmQSYjeGQ7RW9CUjYrMEtGbHUyUTk0dVlyc0lObmxNblJzWmpjckJJOWlRZUNiMmppQmRTRjVZWVZNbloxSk12SXpEdEJWR2lGODVsWGFid0JqSCYjeGQ7eCtDdlFhZ2xmNzFKL2pKUUplTVRvNXpsaVhuSExCUG84cGlUR3hUa2ZCejB3cDBWWFVEbVVGekFvaUgrTmcwYWRYeC9uYlVPN0YzeiYjeGQ7YXVCMkxJbEIzeVIvYnNxN3JXZFBDQ2ZVYmNSNjAvQzQ1SitnbXl4dHB1OERsdkh5TFhvV1M2dXVYNXlrNTM2YWF3Y1BSbnB4SDNFQSYjeGQ7MUxNVitmTnBxUk5XZ282WTFyVkJ1NWV6bjN6QzR1cXI1S2JnVldTQUFYYm1ISlZxTmV6UWJ4YmFsUlRwaWp0MENWUHh6a0pKZFFEbCYjeGQ7bDBMZloxd2ZXTEhDZ0N2aGRKbFdFeWdNUCtxNkozTVNrWGV1elA0ekVWT3BDWW9DcVF1eGY1NkYxalFKNmVpb1Iwc1I2OHpkaURTZiYjeGQ7dlV1dU9aOVpQWUxVeFRsalMrdmdMRzRneFJyUnVzd1ZIWXpwYllmdzF1ZzA1OE9rVVhhanowSHRXNU0wTHMxdFVXQjU2Q29ySkJ2LyYjeGQ7dE1iYWVXck1pNS9iUU45cHA1ZGNnTDF1YW1RM2ZURzZ4R1kydnNXdW42cnk4dlNNZ3hDTUV0blFGRDVCZW9tYW54akRCQ0IzQ2tpaSYjeGQ7NEdVWUxPbTBSMjhTb0J5ZXU5SVN4bGNHa1JnR2VzMThXRTdxbm9GSzZpNEV0ckluaVI0S2Y2VHQ3MWxZTHdhd3ZGQ2JRcjcyL2xyVCYjeGQ7ZkxTVnpiTG1VUytXdW9PcnNUQWZ1NmVaL3lNTmpwMlJXQ2hodjlIT1RmTExDNkZYZFJJeFlYYWhiUnJJV0wyamhQQ1ZpQncyOTRvVyYjeGQ7TFdHSXpTN1hDMzhsWDdoSk93am1vK2ZqemJpdXV2aG5JbGIrMVc3WEZhbW1aaXVnejM0SmMxOVVZaEFZMGVHWFZPaG9pMWRVRGFzUSYjeGQ7NVRVUWRmaCthNGtvT3dNSGoxMzBTcG5PRjk1RUlQWnV1aVZXMGtaVzhUN2hNRC8xTmZLK0tOWWFOcE5VditqeWplNW5ubHE5OXNJRyYjeGQ7TE9TNHlqZDZZeUJ6WUNOS3l4UmNNWWsvREM0M0JrZis4aGtzYTNOcVptemYrKzMvZlc5Sy9OT0tPNkJtencxMWtubWdtaFF0WmFQRyYjeGQ7dzZXdVRpLy9pVS9UOERabkdSdG0vSXpTdVA4L1BkZDd4eHBLS0RVU3NSRC90RmtRcm5UK2RYbE01Wm9mRzJ2NXhVdVpjSWFFKzdXeSYjeGQ7S3JRSm5JdzFSSFhoQU5yeVg4QUxuenlwenZXK1M3dE5VdURweXYxNXA5aVJBVzloTW1TZlN3SWphZkNORHkwTTNic20wNW1YZTJNaiYjeGQ7M21pVDhtQ29oQXQrMjg3elNLekp4RTllTmFub0FnOGxtdGtYWU1XK0JyTmpPVGkzd05SR0V2UXY5Nlp2RzZTRy8zTzNTMkxseDlqayYjeGQ7UzhBcDVGcWFObEFqSHBsUTBRblBiREdGbVVjeHBHdGxZdnZZeVVTL05LL3BZc01helo5dE1vQkM2QS8yaGhabXRQYlhOWGZabmNCbSYjeGQ7RkU5U3dVaGJKaHhzcTVCSUN5dWJsWFB3aENOVktnbmE3eExSYlhFMnRyWjVMcExuN3hmeVpkMVhYNXgwQlJsWmhsL2NzTUZkaC83dCYjeGQ7SHBWeEVCSUFFTEh4QjRySEw0SnczV1p2UGpTWXNDU2pvQzZucGRTUkVEbWRQRUcvZlBuSVlqOXdVazFxT241NllueFNESkJpalozbSYjeGQ7T01OdWlFcG1FcW1rQ2x2NXFVRGgzU0lRQ1JIRzlqejVvNVV4YzkvTTNjN1RhY3lMUys0Wmg0YzVNZWtSdEduNnM3cFNvTGRFV083cyYjeGQ7anZDTWhzSmc1dlFnNUdYWkF6NGs1K2hhVS9GMzNJUWJ4dzN0UXpOSWh6Mlp3ekZRWXltekRIWTR6WnhSa2QyeENaZHNxczFrYmIzNSYjeGQ7MjhyUGpVOVhCNms0TWpoZkYxaXIxZFdLYkVodVhtZUt5aDRqOFhGVHlqb21yeXYxMHUxYzYyVzIyU1c4NmJ5ZmJwZHVIV1ZjajcreiYjeGQ7ZTZWTVJPbUIwYjdhUWl5UHo2Vk1MQVo1S25aaGVOaEZ4Q3Z0YWxqSEd0NDVwQmxlNit0OEhGTHRaMzEyVVJLZzJNRU5hd0VRYi9BTiYjeGQ7L0JlR01Vem5STHl3cmhwSDFkQVUzVW4vdTVFY25NUC92dkdUaEVmRUg0eGNzbCtBcFFQM3BDbHE1MFAwZHhDTk05T0ZvdmJCQ0F6SiYjeGQ7QVFvWFJZa3J2a0EzSUZxekxXMWxSdlJvdFFTVUJ4UGh5WFBHRnJSZzJBYXF3OXZIOUc3S3dEek9nQzFHRW1qTVowTkR1N0Myek9uaCYjeGQ7ZWZWS1VsWHhaTGVBMFRYMm9RaW1tczRnSVU4TERuS0VVZTdVbURkMTdlOXJiaGMxR2NTVitiOXJib0liNEF0V1NvWERXWGNZZUNNUiYjeGQ7N2FTOVVqWmthNklna0grOXZqZ0ZRSXlTSVFaK05rUmp1Q3dXWjJhYkhIeG9HVVhFTGp3RGFOUnZSWk9handIS1J0OGtOc1NQRkdKaCYjeGQ7SDdtVTdpTy9yTk5lNU9sR1dlWE9zQWZkVVB1akhPcnc5dndWZDltTnZqMkhxbHlDMWFRTGM3c3pSSG5XTyszMHRwZFpXYVZBUW9pUiYjeGQ7S2xwaldBWGJBNENrVkV3MXZxSFF2R1ZROE5BMEIzYmJVdjZLc1RHOWZteVY4d0IwcUV6Y2F6ZzVFYXBjRytSR2plSW5DbTJib1J5bSYjeGQ7SEc4N2hpYkJIQ283TnQrN0ZaWUdUQ3NrTnV6Ym5tdlgrRUQ4ay9hVldsMmRINy81dlRXYWduK3FBL2J2OUNudExaeEI1QzJjcnN2cCYjeGQ7bkRHdkRpN0tFWGdQT0tzY0o5aDJkbmlFVmhFUFVsVUpZbVozOTZqZE9vc0FhdXkzVjhJZTFRWCtUQ3lkY3hVVmxhNlJnTUQxYWtMZyYjeGQ7OURCZzlRN0hYb1FSczBkZVkydjJFZjRzbHBDOG5nWEQvOGpxcEVMZUVuZVdxNUZ1T3k3cTRIbTdpUUYvK0YwVExwSWkvWmpLSE1CRCYjeGQ7N01qR2U0eERNMWdBa3lCaENtRmpMS1VRWFVPcmY5eUluaTJuUlVRMSt3b1p1ckQ0VDgvOXpMWXJHN2hwMXhQbVpicmg5bzd3QzEwUSYjeGQ7NmIzSTRyNGZYM1VpaU9xckljS0oxUlhrSWk2b1B1dFZhZkUwSVA4Y01maHJ6em05VUUxOE1IOHlaSzEvL1pCVC9yM0VteXgzZkRtdiYjeGQ7OW1UOE5MUWppd25uKzk0Ly9FOVcvYnZyZXdCa2tlcE41elhpeVZ2QjBQWUZhT3VBV2UyMTZZR1pDTlNrQXZCQ0x4WHl4bWN1NnJReSYjeGQ7VTRLMnFzenhqNGk4NzFMejlUeWJNRzBnMjc2eHlqOGFNbHlZa05pdlVLTUNkZ2hOOXlYb2lmY0pqSFRtamRqYmU5RDdUcFNRYSsxbSYjeGQ7dWIwVituWjdLVWExa0taWTdwcWlkSmhwdDFiRkZ3Mk9PVnI1L2Eyd2hrcnhQTlFQMHZtZWo5bzdYcW96MnFkU1ZsL2w2djlrZS8rNCYjeGQ7cVBsSEtlQkFDWTRXK29KdGZOUnFId2tiSFNVV2FjRUdCVXFqYTZ3U0FOWERXYXc3Ynp1YkdSVWxPY0ZYdFNPRVVzM2kweEpwdThVWSYjeGQ7c2dYdWx2ckRyclNVKzV0Y1E0bFpWY1VONlVlRGJNK3JRNGRVQU03TEpoSWFMQ2pCRXhhdzR2L2FtQTU0YWVHRWJ4VVAzcWRtVDdOKyYjeGQ7a0thMm1jbGVZTnJqQ2s5Qytxd2JlYlNuTW5SWG9CRFBTWTR0bS9ZUDNJSjJFWGx5cmJDMy9aVW5wSVNGYXAzczNGc3NzRVJQZjlWTSYjeGQ7ekRhZmdsUlRUWDJpeDlsdTdXVk16NExRYUtWbHVpR3hRYkVZR1d0MlpDNWlkSzhPVGsxaU5qODAxQ2l3bnFxUzIwSnRidzN2Um9rZyYjeGQ7Um45aEdZZUtLZkdrZkVMN2JjNzJDVVZYSVpOUk51ZXoxazJ0TDNJYlRZWU1OdDNBb2l3YW11QkpGa2FqbVNTaXFzbW9iazd0dW5uZiYjeGQ7dFMxYzZuVmswdDVlREZjZHZWb1F2Q3A2aDQ1eVY3NzliRkc0aU5QRW1WQkVlSS9DUnIyczNyd0dHdVcvQUpNd005VUVwVFZvUjROYSYjeGQ7aGRCZTN0Rk9ZdXJrOEtGRzluUTRBbDZmU3NubEJyOXFGYnNRYTNFQ3EreThHb3NlZktlMFVaZStaZ3BUSXRNTVhKYWV4N2RaNitNbSYjeGQ7M3VyTnk1ZW9ILzB0VCtJWDZhSmI2cDRKMGpLWlRwTSt3SjdKM3ZjbXVpZUEvQTY3UXVxTXlFaW5hN2NuaHdESnJUMUNPN0xtSG5lcyYjeGQ7Mks1QmtScGRTdWxNb1Fkc1NEVGRteGNnNnkvZUtINndiQzFibEN0M1N6d3RxME1oYThDQlIrb2I3TldEdU5uSGtuZzgyUXJCbXZtYiYjeGQ7WVVWeTJwdy8yN0hrVmJOS3BUYlJvclBha0VscHhWaXphbzZsVE5UYmN4VHY5STRSL2xvUnBvWllhRWV4VEhoc0l2a1o0cDRxZjlBdCYjeGQ7TzR2ZGNaWG03WXBvbzNLbXYya2RaMDZGc21YNGNvN0FNZHNhajhQVGFadkpUL0Q1QzVMS3ZGckxlRlVWdmwwVkZmanZBRVU3L2RUeCYjeGQ7THk3ZXJhZGlYODFzQUpJTVBtZnU5V1d1NEVneEc4VGRLWnRGNmh2emk3TzVUbjJnSFdWZ3YrQXZrT1ZQYjRjZnFQWFlLWFVrMmFkYSYjeGQ7Wmh0VjQrbjFFcmtCY25pL3h2MkwxN1Rtc0puQ2pKai8yN1Yvc1Q3MnFXWkpneEhnS2ZsNDlSWHc1M1JOeXJoTGMwM1diclNieWVlZyYjeGQ7ZlVLRDdadjFlYitmR0FSdjlwZ0QwY0J3WUs3dThyaENQNHlVOHJWZlVtSWNXam9RZjJDU3VkTVFwNnV6TS9RSndwdE9oQWN4UGNNZyYjeGQ7WU9RREFnNVl6cjlGbEtJMHZhU2laTHlzL2VJVEdSUTR0aXFma2Y3UkZhOFg4VzBOYmVnNmpxbDM2UWc1ZkFNL01rSTNENEdqdjZReiYjeGQ7OWhacGR4ZW1JMVN2MEVQb3ZlS3BxSlJnVzFqNXZUaWUwWUJENXZNcFpEMW5rUEs2eEpRK3hGYUNIS3RFMlNKdTRHVENkN29oZy92byYjeGQ7QkFxVnZRY3NjNUoxOEdoYk12OE41L25IQzVlbnRidUVtbXlJejFBSkJkaHhGai9wNVdhUkJ2aTRKUnVmZThpdHV3YkZ4d0R0eHBLSyYjeGQ7MXdJOWhQaVBKNFRGeEJyYUZJYzBNdW10ZlZLbG15czNlTXY5Lzh1VEJnVnNFenJRQ1dXUVpTS1RwUXhrNUZIN1VEOTExTmcyZnlLeCYjeGQ7YktHb3pmZlh0bEZ4UVVmSjNJcEJnNnovVEw1UEtLQ3JEemFsMnZaNWgva2cxNEhFcnhiclRIQ1AvdHQxc0pSZFhDNmNWaUpmZ0R0SyYjeGQ7dHhYSkEzVmhmZGtCajE4ZWZ6V1VCVWN2V0JUNmRqTUlsUmZEZmV1dTUrakh0alI2dXpPZlN1Rzg3Ti9BRCtuQStvMmhEYjJqeGMzSCYjeGQ7L2NvQklQRVhlSmV6NytpakpoM21IT2tZVG9vY3prcjVPV1R0NEJUa21QWDhldCt0YzhxOHQrRzRKM0k9PC94ZW5jOkNpcGhlclZhbHVlPiA8L3hlbmM6Q2lwaGVyRGF0YT48L3hlbmM6RW5jcnlwdGVkRGF0YT48eGVuYzpFbmNyeXB0ZWRLZXkgSWQ9Il9hMmE1ZWY3MWYyZGE0NWJmOTZiMmRkZTkxMGI5N2NmZiIgeG1sbnM6eGVuYz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjIj4gPHhlbmM6RW5jcnlwdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3JzYS0xXzUiLz4gPGRzOktleUluZm8geG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpYNTA5RGF0YT4gPGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlFc2pDQ0E1cWdBd0lCQWdJVWEvN2JEOGppemJPSTFJcTNnczU5Wlc1RDNTNHdEUVlKS29aSWh2Y05BUUVMQlFBd2dZc3hDekFKQmdOVkJBWVRBbFZUTVJrd0Z3WURWUVFLRXhCRGJHOTFaRVpzWVhKbExDQkpibU11TVRRd01nWURWUVFMRXl0RGJHOTFaRVpzWVhKbElFOXlhV2RwYmlCVFUwd2dRMlZ5ZEdsbWFXTmhkR1VnUVhWMGFHOXlhWFI1TVJZd0ZBWURWUVFIRXcxVFlXNGdSbkpoYm1OcGMyTnZNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTUI0WERUSXpNRFV5TlRBd05Ea3dNRm9YRFRNNE1EVXlNVEF3TkRrd01Gb3dZakVaTUJjR0ExVUVDaE1RUTJ4dmRXUkdiR0Z5WlN3Z1NXNWpMakVkTUJzR0ExVUVDeE1VUTJ4dmRXUkdiR0Z5WlNCUGNtbG5hVzRnUTBFeEpqQWtCZ05WQkFNVEhVTnNiM1ZrUm14aGNtVWdUM0pwWjJsdUlFTmxjblJwWm1sallYUmxNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQWk4R0xBeGo4cHJnTnd2QmZpQVUxcmwxVGVnQTY0OXppWlRSV0V6UDlBUE9OV0xSVmNZeTZXUnNoTUpxR1FzKzN2cmQyV1djVHlsdlNtZStHY3JGdTJQTnJEalpJZDZ2R1ljR2s4ajVROU55YnlGUVFWMEczc1NvdHZSSnVJQWx3enY1ZUhrUVltNk9aWXZZUXpMSDhBdEIvQ2dVcnVSNzNaQ01nUVd1WE1MNmZ3RkZYKzFtUDV5UEpRZFd1c0UzSU9BYmFQVnUwdXNHQ29hZndLdG5UQTQ5S2NQWkcwM2JjZitSc2JwN1ZvOGVRTzI1SjBVYjBBL1dkNGVvcSsxb2x2bDd2MTQvMzN5SzZrWVFERURCQXYyeExIdHh2UDRGSXAxSGV0Y3NYdjJwdFU5ZSt1SklvQUdtMFJFR1N1UUlzUFEvTTlBZnM2RWJvUUZJZUpkUGgzd0lEQVFBQm80SUJORENDQVRBd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQU1CZ05WSFJNQkFmOEVBakFBTUIwR0ExVWREZ1FXQkJRZzl3TWg1NGRSOTQ3UzZNS296NXRkQVN2OWZ6QWZCZ05WSFNNRUdEQVdnQlFrNkZOWFhYdzBRSWVwNjVUYnV1RVdlUHdwcERCQUJnZ3JCZ0VGQlFjQkFRUTBNREl3TUFZSUt3WUJCUVVITUFHR0pHaDBkSEE2THk5dlkzTndMbU5zYjNWa1pteGhjbVV1WTI5dEwyOXlhV2RwYmw5allUQTFCZ05WSFJFRUxqQXNnaFVxTG5CeWIyMXZZMmx2Ym1KaGJtOXlkR1V1YlhpQ0UzQnliMjF2WTJsdmJtSmhibTl5ZEdVdWJYZ3dPQVlEVlIwZkJERXdMekF0b0N1Z0tZWW5hSFIwY0RvdkwyTnliQzVqYkc5MVpHWnNZWEpsTG1OdmJTOXZjbWxuYVc1ZlkyRXVZM0pzTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDZnFoQUFpVmo5QkhvRG5BVmVKdDczUVdLRUR3NTluK2RySW5QYUlpUVdwUkE4eDVLazMvUDgrRDNFazF5VnRQZUpqOEtiT2l5REhJa0Z0YUJING9qM2Z3aSsyZGRBVDNFUGFnenIxZDlqOFBKaGlIbkpjVWJGOTkxMUpjeWN5QmNBSHFaeEYxbGpibVE1ZmdjTGlsNEhvQVdSZ3FIODdHUFFUQVovaVRMRVloQ3RLbjBRbWxEVzdqVWhoZTZob0VPVHJ3dVVRbnVOOEd5VFNMa1FsL084NWhOSGpaamJXYVZmSlpSZXdHaSt2aVVWQ1NzMDUxdkJucmI5WWhJdXhiVTJGcEVlcExnUVV4bHdNUlpkMGNvMkt4djJEU2c5S05VSWxNSG4wTFlLQ1FtUHgrSTNsMm1DTXlJKzEyb2NwQUg2d0hvMEtoUGxNb1kxa0NkN1dySlk8L2RzOlg1MDlDZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPiA8L2RzOktleUluZm8+IDx4ZW5jOlJlZmVyZW5jZUxpc3Q+PHhlbmM6RGF0YVJlZmVyZW5jZSBVUkk9IiNfNzc3NjAwMzlmMzdmNDBjY2JiMjBlMzhjNzEzZTQ3NzMiLz4gPC94ZW5jOlJlZmVyZW5jZUxpc3Q+IDx4ZW5jOkNpcGhlckRhdGE+PHhlbmM6Q2lwaGVyVmFsdWU+aXpTV2VXdGpPSndxbCtCZEhIUHBXZ2FUNWRJOFVwNVRCQk1WTFF6aWdZM3NpOVpyUHUrcHI3UjJvR2czUzYwMW1wOENuMGxlL2s5ciYjeGQ7bGhrWm5CblNRK0VTUFZHbXhHc1FWUXp6dWhXSkNGVFNPenVIQmZiWE14b2ZkK053YXdqQWs0dXdackpuaDI2WStQR2hsd3hmVFhPMSYjeGQ7a0d0Wm1rcy9LNmwyeHVYajJTOFNkbjdxeGdBZ1gvS0JTY1BEN25tcnFjSWpMOER2aEg0L1pHMkNjeUJ2bTJqY1BLLzY0MjVDdWxLOCYjeGQ7b2xLK3d1cGhvZXZmVlk2c2lsS3dZd09FY3hlbjdKemtSQzhaNUtzMlg0ZDU1OVRrZUdIYm51RWZIbFNWM1p6UzdlL2JBTnRMdmovbiYjeGQ7UmRITklXV0lOOCtqUVFNMDJnNW9Lcjc1YTV1TElpVnN0elRYK1E9PTwveGVuYzpDaXBoZXJWYWx1ZT4gPC94ZW5jOkNpcGhlckRhdGE+PC94ZW5jOkVuY3J5cHRlZEtleT4gPC9zYW1sMjpFbmNyeXB0ZWRBc3NlcnRpb24+PC9zYW1sMnA6UmVzcG9uc2U+"

        // Obtener controlador del SDK con el método público del SDK
        Task { @MainActor in
            if let sdkVC = await ILoyalty.shared.showViewController(
                tokenSAML: tokenSAML,
                section: "loyalty",
                idSection: "hy6",
                typeView: 80
            ) {
                print("Se va a asignar el eventdelegate")
                // Asignar self como delegado
                sdkVC.eventDelegate = self
                
                // Guardar referencia y agregar como hijo
                self.sdkViewController = sdkVC
                self.addChild(sdkVC)
                sdkVC.view.frame = self.view.bounds
                sdkVC.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]
                self.view.addSubview(sdkVC.view)
                sdkVC.didMove(toParent: self)
            } else {
                print("LoyaltyViewController could not be created")
            }
        }

    }
    
    // Muestra un `UIActivityIndicatorView` centrado mientras se carga el contenido del SDK.
    private func setupLoader() {
        loader = UIActivityIndicatorView(style: .large)
        loader.center = view.center
        loader.color = .gray
        loader.startAnimating()
        view.addSubview(loader)
    }
    
    // MARK: - LoyaltyViewDelegate
    
    // Delegate que indica que la vista del SDK ha terminado de cargar y configurar.
    // Se detiene y oculta el indicador de carga.
    func loyaltyViewDidFinishLoading() {
        print("Loyalty view is fully loaded")
        loader.stopAnimating()
        loader.removeFromSuperview()
    }
    
    
    func didReceiveEvent(name: String, payload: [String : Any]) {
        print("Evento recibido: \(name), datos: \(payload)")
        
        let payloadString = payload.map { "\($0.key): \($0.value)" }.joined(separator: "\n")
        
        let alert = UIAlertController(
            title: name,
            message: payloadString,
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "OK", style: .default))
        
        DispatchQueue.main.async {
            if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
               let rootViewController = windowScene.windows.first(where: { $0.isKeyWindow })?.rootViewController {
                
                if rootViewController.presentedViewController is UIAlertController {
                    rootViewController.dismiss(animated: false) {
                        rootViewController.present(alert, animated: true)
                    }
                } else {
                    rootViewController.present(alert, animated: true)
                }
            }
        }
    }
}
